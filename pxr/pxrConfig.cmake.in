# - Configuration file for the pxr project
# Defines the following variables:
# PXR_MAJOR_VERSION - Major version number.
# PXR_MINOR_VERSION - Minor version number.
# PXR_PATCH_VERSION - Patch version number.
# PXR_VERSION       - Complete pxr version string.
# PXR_INCLUDE_DIRS  - Root include directory for the installed project.
# PXR_LIBRARIES     - List of all libraries, by target name.
# PXR_foo_LIBRARY   - Absolute path to individual libraries.
# The preprocessor definition PXR_STATIC will be defined if appropriate

get_filename_component(PXR_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

set(PXR_MAJOR_VERSION "@PXR_MAJOR_VERSION@")
set(PXR_MINOR_VERSION "@PXR_MINOR_VERSION@")
set(PXR_PATCH_VERSION "@PXR_PATCH_VERSION@")
set(PXR_VERSION "@PXR_VERSION@")

include(CMakeFindDependencyMacro)
find_dependency(tbb REQUIRED)
# If Python support was enabled for this USD build, find the import
# targets by invoking the appropriate FindPython module. Use the same
# LIBRARY and INCLUDE_DIR settings from the original build if they
# were set. This can be overridden by specifying different values when
# running cmake.
if(@PXR_ENABLE_PYTHON_SUPPORT@)

    if (NOT DEFINED Python3_VERSION)
        find_package(Python3 "@Python3_VERSION@" EXACT COMPONENTS Development REQUIRED)
    else()
        find_package(Python3 COMPONENTS Development REQUIRED)
    endif()

    if(NOT TARGET PYTHON::PYTHON)
        add_library(PYTHON::PYTHON INTERFACE IMPORTED)

        set_target_properties(PYTHON::PYTHON PROPERTIES
            INTERFACE_INCLUDE_DIRECTORIES "${Python3_INCLUDE_DIRS}"
            INTERFACE_LINK_LIBRARIES "${Python3_LIBRARIES}" )
    endif()

    
endif()

# If MaterialX support was enabled for this USD build, try to find the
# associated import targets by invoking the same FindMaterialX.cmake
# module that was used for that build. This can be overridden by
# specifying a different MaterialX_DIR when running cmake.
if(@PXR_ENABLE_MATERIALX_SUPPORT@)
    find_dependency(MaterialX REQUIRED)
endif()

# Similar to MaterialX above, we are using Imath's cmake package config, so set
# the Imath_DIR accordingly to find the associated import targets which were
# used for this USD build. 
# Note that we only need to do this, when it is determined by Imath is being
# used instead of OpenExr (refer Packages.cmake)
if(@Imath_FOUND@)
    find_dependency(Imath REQUIRED)
endif()

if(@PXR_ENABLE_PTEX_SUPPORT@)
    find_dependency(PTex REQUIRED)
endif()

if(@OpenColorIO_FOUND@)
    find_dependency(OpenColorIO REQUIRED)
endif()

if(@OpenSubdiv_FOUND@)
    find_dependency(OpenSubdiv 3 REQUIRED)
endif()

if(@PXR_ENABLE_OPENVDB_SUPPORT@)
    find_dependency(OpenVDB REQUIRED)
endif()

if(@PXR_ENABLE_GL_SUPPORT@)
    if(ANDROID)

        SET(OPENGL_FOUND TRUE)
        SET(OPENGL_GLU_FOUND TRUE)
	
        FIND_PATH( GLESv3_INCLUDE_DIR
                    GLES3/gl3.h
                    "${ANDROID_STANDALONE_TOOLCHAIN}/usr/include"
                )

        if(NOT TARGET OpenGL::GL)
            add_library(OpenGL::GL INTERFACE IMPORTED)
	    
	        set_property(TARGET OpenGL::GL APPEND PROPERTY INTERFACE_LINK_LIBRARIES EGL GLESv3)

            set_target_properties(OpenGL::GL PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES "${GLESv3_INCLUDE_DIR}"
                )

        endif()

    else()
        find_package(OpenGL REQUIRED)
    endif()
endif()
if(@PXR_ENABLE_VULKAN_SUPPORT@)

    if(ANDROID)
        find_dependency(Vulkan REQUIRED)
        
        if(NOT TARGET shaderc_combined)
            FIND_PATH( SHADERC_INCLUDE_DIR
                shaderc/shaderc.h
                "${ANDROID_NDK}/sources/third_party/shaderc/include"
            )
            FIND_LIBRARY( SHADERC_LIBRARIES
                NAMES
                    shaderc
                PATHS
                    "${ANDROID_NDK}/sources/third_party/shaderc/libs/c++_static/${ANDROID_ABI}"
            )

            add_library(shaderc_combined INTERFACE IMPORTED)
            set_target_properties(shaderc_combined PROPERTIES
            INTERFACE_INCLUDE_DIRECTORIES "${SHADERC_INCLUDE_DIR};${PXR_CMAKE_DIR}/include/android_support"
            INTERFACE_LINK_LIBRARIES "${SHADERC_LIBRARIES}"
            )

        endif()
    else()
        find_dependency(Vulkan REQUIRED)
        
        if(NOT TARGET shaderc_combined)
            find_library(shaderc_combined_release_lib_path NAMES "shaderc_combined" PATHS $ENV{VULKAN_SDK}/lib)
            find_library(shaderc_combined_debug_lib_path NAMES "shaderc_combinedd" PATHS $ENV{VULKAN_SDK}/lib)

            add_library(shaderc_combined STATIC IMPORTED)
            set_target_properties(shaderc_combined PROPERTIES
            IMPORTED_LOCATION_RELEASE "${shaderc_combined_release_lib_path}"
            IMPORTED_LOCATION_DEBUG "${shaderc_combined_debug_lib_path}"
            IMPORTED_LOCATION_RELWITHDEBINFO "${shaderc_combined_release_lib_path}"
            )
        endif()
    endif()
endif()

include("${PXR_CMAKE_DIR}/cmake/pxrTargets.cmake")
if (TARGET usd_ms)
    set(libs "usd_ms")
else()
    set(libs "@PXR_ALL_LIBS@")
endif()
set(PXR_LIBRARIES "")
set(PXR_INCLUDE_DIRS "${PXR_CMAKE_DIR}/include")
string(REPLACE " " ";" libs "${libs}")
foreach(lib ${libs})
    get_target_property(location ${lib} LOCATION)
    set(PXR_${lib}_LIBRARY ${location})
    list(APPEND PXR_LIBRARIES ${lib})
endforeach()
if(NOT @BUILD_SHARED_LIBS@)
    if(WIN32)
        list(APPEND PXR_LIBRARIES Shlwapi.lib)
        list(APPEND PXR_LIBRARIES Dbghelp.lib)
    endif()
    add_definitions(-DPXR_STATIC)
endif()
